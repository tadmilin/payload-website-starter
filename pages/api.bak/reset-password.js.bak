// [BACKUP FILE - ไม่ได้ใช้งานแล้ว] 
// บันทึกเป็น backup ไว้เพื่อไม่ให้เกิดการ conflict กับ API route ใน App Router
// API route สำหรับ reset-password ในแบบ Pages Router (ซึ่งไม่มีปัญหาเรื่อง CORS)
export default async function handler(req, res) {
  // ตั้งค่า CORS headers แบบมั่นใจ 100%
  res.setHeader('Access-Control-Allow-Credentials', 'true')
  res.setHeader('Access-Control-Allow-Origin', '*')
  res.setHeader('Access-Control-Allow-Methods', 'GET,POST,OPTIONS')
  res.setHeader(
    'Access-Control-Allow-Headers',
    'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization, Origin',
  )

  // ถ้าเป็น OPTIONS request (preflight) ให้ตอบกลับทันที
  if (req.method === 'OPTIONS') {
    return res.status(200).end()
  }

  // ถ้าเป็น GET request
  if (req.method === 'GET') {
    return res.status(200).json({ message: 'Reset password endpoint is active' })
  }

  // สำหรับ POST request
  if (req.method === 'POST') {
    try {
      const { token, password } = req.body

      if (!token || !password) {
        return res.status(400).json({ error: 'Token และ password จำเป็นต้องระบุ' })
      }

      console.log('PAGES RESET-PASSWORD: Token is provided:', !!token)
      console.log('PAGES RESET-PASSWORD: Password is provided:', !!password)

      // เรียก Payload API
      const baseUrl =
        process.env.NEXT_PUBLIC_SERVER_URL || process.env.VERCEL_URL || 'http://localhost:3000'
      const payloadApiUrl = `${baseUrl}/api/payload/users/reset-password`

      console.log('PAGES RESET-PASSWORD: Forwarding to:', payloadApiUrl)

      const payloadResponse = await fetch(payloadApiUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ token, password }),
      })

      console.log('PAGES RESET-PASSWORD: Response status:', payloadResponse.status)

      // อ่านข้อมูลการตอบกลับ
      let responseData
      try {
        responseData = await payloadResponse.json()
      } catch (e) {
        // ถ้าไม่ใช่ JSON
        const text = await payloadResponse.text()
        responseData = { message: text }
      }

      // ตอบกลับด้วยข้อมูลและ status code เดียวกัน
      return res.status(payloadResponse.status).json(responseData)
    } catch (error) {
      console.error('PAGES RESET-PASSWORD: Error:', error)
      return res.status(500).json({ error: 'เกิดข้อผิดพลาดในการประมวลผลคำขอ' })
    }
  }

  // ถ้าเป็น method อื่นๆ ที่ไม่รองรับ
  return res.status(405).json({ error: 'Method not allowed' })
} 